#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS DOLLAR>; };

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    combos {
        compatible = "zmk,combos";

        c_up {
            bindings = <&kp UP>;
            key-positions = <44 32>;
            layers = <0 1>;
        };

        c_down {
            bindings = <&kp DOWN>;
            key-positions = <44 56>;
            layers = <0 1>;
        };

        c_left {
            bindings = <&kp LEFT>;
            key-positions = <44 43>;
            layers = <0 1>;
        };

        c_right {
            bindings = <&kp RIGHT>;
            key-positions = <44 45>;
            layers = <0 1>;
        };

        cm_pgup {
            bindings = <&kp PG_UP>;
            key-positions = <43 31>;
            layers = <0 1>;
        };

        cm_pgdn {
            bindings = <&kp PG_DN>;
            key-positions = <43 55>;
            layers = <0 1>;
        };
    };

    behaviors {
        mrph_lbkt: mrph_lbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "MRPH_LBKT";
            bindings = <&kp LBRC>, <&kp LBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mrph_rbkt: mrph_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "MRPH_RBKT";
            bindings = <&kp RBRC>, <&kp RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_leftup: td_leftup {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LEFTUP";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp UP>;
        };

        td_rightdown: td_rightdown {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RIGHTDOWN";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp DOWN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp F1     &kp F2    &kp F3    &kp F4     &kp F5     &kp F6                        &kp F7      &kp F8          &kp F9     &kp F10   &kp F11   &kp F12
&kp ESC    &kp N1    &kp N2    &kp N3     &kp N4     &kp N5                        &kp N6      &kp N7          &kp N8     &kp N9    &kp N0    &kp MINUS
&kp GRAVE  &kp Q     &kp W     &kp F      &kp P      &kp B                         &kp K       &kp L           &kp U      &kp Y     &kp SEMI  &kp EQUAL
&kp TAB    &kp A     &kp R     &kp S      &kp T      &kp G                         &kp M       &kp N           &kp E      &kp I     &kp O     &kp SQT
&kp HOME   &kp Z     &kp X     &kp C      &kp D      &kp V                         &kp J       &kp H           &kp COMMA  &kp DOT   &kp FSLH  &kp BSLH
&kp END    &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT                                            &kp RSHFT       &kp LCTRL  &kp LALT  &kp LGUI  &caps_word
                                          &kp SPACE  &kp BSPC        &lt 4 ESC     &mo 4       &kp DEL         &kp ENTER
                                          &mo 2      &mt LGUI PG_UP  &mrph_lbkt    &mrph_rbkt  &mt LGUI PG_DN  &mo 2
            >;
        };

        qwerty_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans    &trans
&trans  &kp Q   &kp W   &kp E   &kp R   &kp T             &kp Y   &kp U   &kp I   &kp O   &kp P     &trans
&trans  &kp A   &kp S   &kp D   &kp F   &kp G             &kp H   &kp J   &kp K   &kp L   &kp SEMI  &trans
&trans  &kp Z   &kp X   &kp C   &kp V   &kp B             &kp N   &kp M   &trans  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans                            &trans  &trans  &trans  &trans    &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Numpad_Nav_Layer {
            bindings = <
&kp C_BRI_UP  &kp C_BRI_DN     &none   &none     &rgb_ug RGB_BRD  &rgb_ug RGB_BRI            &kp C_PREV  &kp C_PP   &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP
&trans        &kp EXCLAMATION  &kp AT  &kp HASH  &kp DOLLAR       &kp PERCENT                &kp CARET   &kp AMPS   &kp STAR    &kp LPAR    &kp RPAR      &kp UNDER
&none         &kp KP_NUM       &kp N7  &kp N8    &kp N9           &kp LPAR                   &kp RPAR    &kp PG_UP  &kp UP      &none       &none         &kp PSCRN
&none         &none            &kp N4  &kp N5    &kp N6           &kp LBRC                   &kp RBRC    &kp LEFT   &kp DOWN    &kp RIGHT   &kp K_APP     &none
&none         &kp N0           &kp N1  &kp N2    &kp N3           &kp LBKT                   &kp RBKT    &kp PG_DN  &kp HOME    &kp END     &none         &none
&none         &trans           &trans  &trans    &trans                                                  &trans     &trans      &trans      &trans        &kp CAPS
                                                 &trans           &trans           &trans    &none       &kp INS    &trans
                                                 &trans           &kp LGUI         &trans    &trans      &kp LGUI   &trans
            >;
        };

        Auto_Mouse_Layer {
            bindings = <
&trans  &none   &none      &none      &none      &none             &none   &none      &none      &none      &none   &none
&none   &none   &none      &none      &none      &none             &none   &none      &none      &none      &none   &none
&none   &none   &none      &none      &none      &none             &none   &none      &none      &none      &none   &none
&none   &none   &mkp RCLK  &mkp MCLK  &mkp LCLK  &none             &none   &mkp LCLK  &mkp MCLK  &mkp RCLK  &none   &none
&none   &none   &none      &none      &none      &none             &none   &none      &none      &none      &none   &none
&none   &trans  &trans     &trans     &none                                &none      &trans     &trans     &trans  &none
                                      &trans     &trans  &trans    &trans  &trans     &trans
                                      &trans     &trans  &trans    &trans  &trans     &trans
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
&none        &none         &none         &none         &none         &none                   &none            &none            &none            &none            &none            &tog 1
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &none            &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &none            &none            &none
&sys_reset   &none         &none         &none         &none         &none                   &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &none         &none         &none         &none         &none                   &none            &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&to 5        &none         &none         &none         &none         &none                   &none            &none            &none            &none            &none            &to 5
&to 5        &none         &none         &none         &none                                                  &none            &none            &none            &none            &to 5
                                                       &none         &none         &trans    &trans           &none            &none
                                                       &none         &none         &none     &none            &none            &none
            >;
        };

        factory_test {
            bindings = <
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1
&kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7            &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4                            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };
    };
};

// right hand trackball configuration

&trackball_peripheral_listener {
    input-processors =
        // activate layer 3 within 500ms of the trackball moving,,,,,,,,
        <&zip_temp_layer 3 500>;
};

//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,,,,,,,,
        <&zip_xy_scaler 1 3>,
        // make this trackball output scrolling events by default instead of cursor movement,,,,,,,,,
        <&zip_xy_to_scroll_mapper>,
        // invert horiz scrolling so that the view moves in the same direction as the top of the trackball.,,,,,,,,,
        <&zip_scroll_transform INPUT_TRANSFORM_X_INVERT>,
        <&zip_scroll_scaler 1 12>;
};
